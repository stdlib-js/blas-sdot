{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFloat32VectorLike from '@stdlib/assert-is-float32vector-like' ;\nimport { ndarray as dot } from '@stdlib/blas-base-sdot' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors.\n*\n* @param {VectorLike} x - first input array\n* @param {VectorLike} y - second input array\n* @throws {TypeError} first argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must be a 1-dimensional ndarray containing single-precision floating-point numbers\n* @throws {RangeError} input arrays must be the same length\n* @returns {number} dot product\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import array from '@stdlib/ndarray-array' ;\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns -5.0\n*/\nfunction sdot( x, y ) {\n\tif ( !isFloat32VectorLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a one-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32VectorLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a one-dimensional ndarray containing single-precision floating-point numbers (i.e., an ndarray whose underlying data buffer is a Float32Array). Value: `%s`.', y ) );\n\t}\n\tif ( x.length !== y.length ) {\n\t\tthrow new RangeError( format( 'invalid argument. Arrays must be the same length. First argument length: `%u`. Second argument length: `%u`.', x.length, y.length ) );\n\t}\n\treturn dot( x.length, x.data, x.strides[ 0 ], x.offset, y.data, y.strides[ 0 ], y.offset ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sdot;\n"],"names":["sdot","x","y","isFloat32VectorLike","TypeError","format","length","RangeError","dot","data","strides","offset"],"mappings":";;uRAiDA,SAASA,EAAMC,EAAGC,GACjB,IAAMC,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,wMAAyMJ,IAEvO,IAAME,EAAqBD,GAC1B,MAAM,IAAIE,UAAWC,EAAQ,yMAA0MH,IAExO,GAAKD,EAAEK,SAAWJ,EAAEI,OACnB,MAAM,IAAIC,WAAYF,EAAQ,+GAAgHJ,EAAEK,OAAQJ,EAAEI,SAE3J,OAAOE,EAAKP,EAAEK,OAAQL,EAAEQ,KAAMR,EAAES,QAAS,GAAKT,EAAEU,OAAQT,EAAEO,KAAMP,EAAEQ,QAAS,GAAKR,EAAES"}