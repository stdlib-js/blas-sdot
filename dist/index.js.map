{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFloat32ndarrayLike = require( '@stdlib/assert-is-float32ndarray-like' );\nvar isNegativeInteger = require( '@stdlib/assert-is-negative-integer' ).isPrimitive;\nvar min = require( '@stdlib/math-base-special-fast-min' );\nvar without = require( '@stdlib/array-base-without' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar maybeBroadcastArrays = require( '@stdlib/ndarray-base-maybe-broadcast-arrays' );\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar nditerStacks = require( '@stdlib/ndarray-iter-stacks' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar base = require( '@stdlib/blas-base-sdot' ).ndarray;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors.\n*\n* @param {ndarrayLike} x - first input array\n* @param {ndarrayLike} y - second input array\n* @param {NegativeInteger} [dim=-1] - dimension for which to compute the dot product\n* @throws {TypeError} first argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} first argument must have at least one dimension\n* @throws {TypeError} second argument must be a ndarray containing single-precision floating-point numbers\n* @throws {TypeError} second argument must have at least one dimension\n* @throws {TypeError} third argument must be a negative integer\n* @throws {Error} input arrays must be broadcast compatible\n* @throws {RangeError} the size of the contracted dimension must be the same for both input arrays\n* @throws {RangeError} third argument is out-of-bounds\n* @returns {ndarray} ndarray containing the dot product\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\nfunction sdot( x, y ) {\n\tvar dim;\n\tvar xsh;\n\tvar ysh;\n\tvar osh;\n\tvar xit;\n\tvar yit;\n\tvar out;\n\tvar tmp;\n\tvar xc;\n\tvar yc;\n\tvar vx;\n\tvar vy;\n\tvar dm;\n\tvar S;\n\tvar v;\n\tvar i;\n\n\tif ( !isFloat32ndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', x ) );\n\t}\n\tif ( !isFloat32ndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray containing single-precision floating-point numbers. Value: `%s`.', y ) );\n\t}\n\t// Convert the input arrays to \"base\" ndarrays:\n\txc = ndarraylike2ndarray( x );\n\tyc = ndarraylike2ndarray( y );\n\n\t// Resolve the input array shapes:\n\txsh = xc.shape;\n\tysh = yc.shape;\n\n\t// Validate that we've been provided non-zero-dimensional arrays...\n\tif ( xsh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t}\n\tif ( ysh.length < 1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t}\n\t// Validate that the dimension argument is a negative integer...\n\tif ( arguments.length > 2 ) {\n\t\tdim = arguments[ 2 ];\n\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t}\n\t} else {\n\t\tdim = -1;\n\t}\n\t// Validate that a provided dimension index is within bounds **before** broadcasting...\n\tdm = min( xsh.length, ysh.length ) - 1;\n\tdim = normalizeIndex( dim, dm );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t}\n\t// Validate that the contracted dimension size is the same for both input arrays...\n\tS = xsh[ dim ];\n\tif ( ysh[ dim ] !== S ) {\n\t\tthrow new RangeError( format( 'invalid argument. The size of the contracted dimension must be the same for both input ndarrays. Dim(%s,%d) = %d. Dim(%s,%d) = %d.', 'x', dim, S, 'y', dim, ysh[ dim ] ) );\n\t}\n\t// Broadcast the input arrays to a common shape....\n\ttry {\n\t\ttmp = maybeBroadcastArrays( [ xc, yc ] );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\tthrow new Error( format( 'invalid arguments. Input ndarrays must be broadcast compatible. Shape(%s) = (%s). Shape(%s) = (%s).', 'x', xsh.join( ',' ), 'y', ysh.join( ',' ) ) );\n\t}\n\txc = tmp[ 0 ];\n\tyc = tmp[ 1 ];\n\n\t// Resolve the output array shape by excluding the contracted dimension:\n\tosh = without( xc.shape, dim );\n\n\t// Allocate an empty output array:\n\tout = empty( osh, {\n\t\t'dtype': xc.dtype,\n\t\t'order': xc.order\n\t});\n\n\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\tif ( osh.length === 0 ) {\n\t\tv = base( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\tout.iset( v );\n\t\treturn out;\n\t}\n\t// Create iterators for iterating over stacks of vectors:\n\txit = nditerStacks( xc, [ dim ] );\n\tyit = nditerStacks( yc, [ dim ] );\n\n\t// Compute the dot product for each pair of vectors...\n\tfor ( i = 0; i < numel( osh ); i++ ) {\n\t\tvx = xit.next().value;\n\t\tvy = yit.next().value;\n\t\tv = base( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\tout.iset( i, v );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sdot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to compute the dot product of two single-precision floating-point vectors.\n*\n* @module @stdlib/blas-sdot\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var array = require( '@stdlib/ndarray-array' );\n* var sdot = require( '@stdlib/blas-sdot' );\n*\n* var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* var z = sdot( x, y );\n* // returns <ndarray>\n*\n* var v = z.get();\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFloat32ndarrayLike", "isNegativeInteger", "min", "without", "numel", "normalizeIndex", "maybeBroadcastArrays", "ndarraylike2ndarray", "nditerStacks", "empty", "base", "format", "sdot", "x", "y", "dim", "xsh", "ysh", "osh", "xit", "yit", "out", "tmp", "xc", "yc", "vx", "vy", "dm", "S", "v", "i", "err", "main"]
}
